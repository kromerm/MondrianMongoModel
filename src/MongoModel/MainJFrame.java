/*
 * This a quick & dirty tool to generate starter schemas in Mondrian 4
 * against mongoDB data sources.
 * 
 * Use this completely as-is on non-production systems to generate semamtic
 * models that get up & running on Mondrian with MongoDB.
 * 
 * Find the project on Github, send me messages on there, contribute to the
 * project and let me know how you make out! Use at your own risk!
 * 
 * Module: MainJFrame is the primary UI class, lots of functionality just
 * stuffed into this class! So much for MVC ...
 * 
 * Thanks, Mark Kromer
 * July 20, 2014 mark_kromer@mail.com
 * 
 */
package MongoModel;

import com.mongodb.*;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import javax.swing.*;
import java.util.*;
import org.json.*;

/**
 *
 * @author mkromer
 */
public class MainJFrame extends javax.swing.JFrame {

    List <String> dbs;
    ArrayList <String> meas = new ArrayList <String>();
    ArrayList <String> dims = new ArrayList <String>();
    MongoClient mongoClient;   
    DB db;
    DBCollection collection;
    String olap4j;
    ConfigurationManager config;
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList5 = new javax.swing.JList();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonOlap4j = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuMakeModel = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        jScrollPane6.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mongo Model Generator");
        setResizable(false);

        jTextField1.setText("localhost");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.setBackground(new java.awt.Color(212, 208, 200));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setName(""); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jList2.setBackground(new java.awt.Color(212, 208, 200));
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jButton3.setText("Get Collections");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jList3.setBackground(new java.awt.Color(212, 208, 200));
        jList3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jList3);

        jButton4.setText("Sample Fields");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jList4.setBackground(new java.awt.Color(212, 208, 200));
        jList4.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList4KeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jList4);

        jList5.setBackground(new java.awt.Color(212, 208, 200));
        jList5.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList5KeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(jList5);

        jButton5.setText("Add to Measures List");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Add to Dimensions List");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextField2.setText("username");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jPasswordField1.setText("jPasswordField1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane7.setViewportView(jTextArea1);

        jButtonOlap4j.setText("Append to olap4j.properties");
        jButtonOlap4j.setEnabled(false);
        jButtonOlap4j.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOlap4jActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuMakeModel.setText("Make Model");
        jMenuMakeModel.setEnabled(false);
        jMenuMakeModel.setName(""); // NOI18N
        jMenuMakeModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuMakeModelActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuMakeModel);

        jMenuItem2.setText("Edit Model");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem4.setText("Settings");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem3.setText("Manage olap4j.properties");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem5.setText("Home Page");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("About");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonOlap4j, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane7)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOlap4j)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // connect button
        
        try{           
           mongoClient = new MongoClient( jTextField1.getText() , 27017 );
           dbs = mongoClient.getDatabaseNames();           
       }
       catch (Exception e)
       {
           e.printStackTrace();           
           JOptionPane.showMessageDialog(this,"Could not connect to host", "Warning", JOptionPane.WARNING_MESSAGE);
           return;
       }           
       
       jButton3.setEnabled(true);
       
       // use this as the model to contain the list of databases
        DefaultListModel data = new DefaultListModel();

        for (int i=0; i < dbs.size(); i++)
        {
            data.add(i,dbs.get(i));
        }

        jList1.setModel(data);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //Get collections button
        if (dbs.isEmpty() || jList1.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(this,"Make sure you have connected first & selected a DB", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String mydb=jList1.getSelectedValue().toString();
        
        // Try to authenticate against MongoDB
        try
        {
            MongoCredential credential = MongoCredential.createMongoCRCredential(jTextField2.getText(),mydb, jPasswordField1.toString().toCharArray());
            MongoClient mongoClient = new MongoClient(new ServerAddress(jTextField1.toString()), Arrays.asList(credential));
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Authentication Failed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
       
        jButton4.setEnabled(true);
        
        db = mongoClient.getDB( mydb );
        Set <String> colls = db.getCollectionNames();
        
        ArrayList<String> newcolls = new ArrayList<String>();

        for (String s2 : colls) {
            newcolls.add(s2);
        }

        DefaultListModel data = new DefaultListModel();

        for (int i=0; i < newcolls.size(); i++)
        {
            data.add(i,newcolls.get(i));            
        }
        
        jList2.setModel(data);
        
        //DBObject doc = jList1.getSelectedIndex()
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        if (jList2.getModel().getSize() == 0) {
            JOptionPane.showMessageDialog(this,"Make sure you have selected a DB & a Collection", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        jButton5.setEnabled(true);
        jButton6.setEnabled(true);
        
        // create an empty query
        BasicDBObject query = new BasicDBObject(); 
        //BasicDBObject fields = new BasicDBObject("Name",true).append("_id",false);
        
        collection = db.getCollection (jList2.getSelectedValue().toString());
        DBCursor cursor = collection.find(query);
        DefaultListModel data = new DefaultListModel();
                
        int i=0;
        try {        
            while(cursor.hasNext()) {                
               String s1=cursor.next().toString();
               JSONObject jobj = new JSONObject (s1);
               JSONArray ja  = jobj.names();
                
               // find & parse field names from JSON document sampling               
                for (int x=0;x<ja.length();x++) {                              
                    String s2 = ja.get(x).toString();

                   // Check to see if the field is an array JSON type
                   JSONArray category=null;
                   category=jobj.optJSONArray(s2);
                    
                   //yes, this is an array field
                   if(category != null)
                    {
                        // save original array name
                        String s3=s2;

                        s2=s3+"[*]";
                        if (!data.contains(s2)){
                            data.add(i,s2);
                            i++;
                        }
                        
                        // get field list from first index in array
                        JSONObject jobj1 = new JSONObject (category.get(0).toString());
                        JSONArray ja1 = jobj1.names();
                        
                        for (int y=0; y<ja1.length();y++)
                        {
                            s2=s3+"[*]."+ja1.get(y);
                            if (!data.contains(s2)){
                                data.add(i,s2);
                                i++;
                            }     // end if     
                            //JOptionPane.showMessageDialog(this,s2, "Success", JOptionPane.INFORMATION_MESSAGE);
                        } // next
                     } // end if category
                   // no, it's not an array type
                   else {
                        if (!data.contains(s2)){
                            data.add(i,s2);
                            i++;
                        }     // end if     
                   } // end if-then-else
                }              
               
                if (i > 5) break;
            }
        }
        
        catch (Exception e) {}
        
        finally { cursor.close(); }

        jList3.setModel(data);
	
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        if (jList3.getSelectedValue() == null) return;
        
        DefaultListModel data = new DefaultListModel ();

        String mys=jList3.getSelectedValue().toString();

        if (meas.contains(mys)) return;
        
        meas.add(mys);

        for (int i=0; i < meas.size(); i++)
        {
            data.add(i,meas.get(i));            
        }
        
        jList4.setModel(data);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        DefaultListModel data = new DefaultListModel ();

        if (jList3.getSelectedValue() == null) return;
        
        jMenuMakeModel.setEnabled(true);
        
        String mys=jList3.getSelectedValue().toString();

        if (dims.contains(mys)) return;
        
        dims.add(mys);

        for (int i=0; i < dims.size(); i++)
        {
            data.add(i,dims.get(i));            
        }
        
        jList5.setModel(data);
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jList4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList4KeyPressed
        // TODO add your handling code here:        
        // Delete item from list
        if (evt.getKeyCode() != 127) return;        
        
        int y = jList4.getSelectedIndex();
        meas.remove(y);
        
        DefaultListModel data = new DefaultListModel ();
        for (int i=0; i < meas.size(); i++)
        {
            //if (i != jList4.getSelectedIndex())
                data.add(i,meas.get(i));            
        }
        jList4.setModel(data);
        
    }//GEN-LAST:event_jList4KeyPressed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jList5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList5KeyPressed
        // TODO add your handling code here:
        // Delete item from list
        if (evt.getKeyCode() != 127) return;        
        
        int y = jList5.getSelectedIndex();
        dims.remove(y);
        
        DefaultListModel data = new DefaultListModel ();
        for (int i=0; i < dims.size(); i++)
        {
            //if (i != jList5.getSelectedIndex())
                data.add(i,dims.get(i));            
        }
        jList5.setModel(data);

    }//GEN-LAST:event_jList5KeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuMakeModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuMakeModelActionPerformed
        // TODO add your handling code here:
        
        if (meas.size() == 0 || dims.size() == 0) {
            JOptionPane.showMessageDialog(this,"Make sure you have at least 1 Dimension & 1 Measure before continuing.", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String cubename = new String();
        cubename=JOptionPane.showInputDialog(null, "Type in a name for your model", "Model Name", 1);
        
        if (cubename.length()<1||cubename.equals(""))
        {
            JOptionPane.showMessageDialog(this,"Invalid cube name", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String sfinal = "<Schema name=\""+cubename+"\" quoteSql=\"false\" missingLink=\"ignore\" metamodelVersion=\"4.00\">\n" +
        "  <PhysicalSchema >\n"+
        "    <Table name=\""+collection.toString()+"\">\n" +
        "      <ColumnDefs>\n";
        
        int j = 0;
        for (String f1 : meas)
        {
            String m = f1;
            f1=f1.replace("_", " ");
            f1=f1.toLowerCase();
            f1=f1.substring(0,1).toUpperCase()+f1.substring(1);
            
            if (f1.contains("[*]")){
                f1=f1.replace("[*]", "");
            }
            
             sfinal+="       <CalculatedColumnDef name='"+f1+"' type=\"Numeric\" >\n" +
                    "          <ExpressionView >\n" +
                    "            <SQL dialect='generic'>\n" +
                    "              $"+m+"\n" +
                    "            </SQL>\n" +
                    "          </ExpressionView>\n" +
                    "        </CalculatedColumnDef>\n";
             meas.set(j,f1);
             j++;
        }
        
        j = 0;
        for (String f1 : dims)
        {
            String m = f1;
            f1=f1.replace("_", " ");
            f1=f1.toLowerCase();
            f1=f1.substring(0,1).toUpperCase()+f1.substring(1);

            // modify array field names
            if (f1.contains("[*]")){
                f1=f1.replace("[*]", "");
            }

            
             sfinal+="       <CalculatedColumnDef name='"+f1+"' type=\"String\" >\n" +
                    "          <ExpressionView >\n" +
                    "            <SQL dialect='generic'>\n" +
                    "              $"+m+"\n" +
                    "            </SQL>\n" +
                    "          </ExpressionView>\n" +
                    "        </CalculatedColumnDef>\n";
             dims.set(j,f1);
             j++;
        }

        sfinal+="\t  </ColumnDefs>\n" +
        "    </Table >\n" +
        "  </PhysicalSchema> \n";

        sfinal+="<Cube name='"+cubename+"\' defaultMeasure='"+meas.get(0)+"\'>\n" +
                "    <Dimensions> \n";

        // iterate through dims
        for (int i=0;i<dims.size();i++)
        {
           String mys = new String(dims.get(i));
           sfinal+="    <Dimension name='"+mys+"\' table='"+collection.toString()+"\' key='"+mys+"\'>\n" +
                   "        <Attributes>\n" +
                   "          <Attribute name='"+mys+"\' keyColumn='"+mys+"\' hasHierarchy='false'/>\n" +
                   "        </Attributes>\n" +
                   "        <Hierarchies>\n" +
                   "          <Hierarchy name='"+mys+"\'>\n" +
                   "            <Level attribute='"+mys+"\'/>\n" +
                   "          </Hierarchy>        \n" +
                   "       </Hierarchies>\n" +
                   "     </Dimension> \n";
        }

        sfinal+="    </Dimensions>\n" +
                "<MeasureGroups>\n" +
                "<MeasureGroup name='"+cubename+"\' table='"+collection.toString()+"\'> \n"+
                "<Measures> \n";

        // iterate through measures
        for (int y=0;y<meas.size();y++)
        {
            sfinal+="\n    <Measure name='"+meas.get(y)+"\' column='"+meas.get(y)+"\' aggregator=\'sum\' formatString='Standard'/>";
        }

        sfinal+="        \n</Measures>\n" +
                "     <DimensionLinks>\n";

        for (String s1 : dims)
        {
            sfinal+= "          <FactLink dimension='"+s1+"\' />\n";
        };

        sfinal+="        </DimensionLinks>\n" +
                "      </MeasureGroup>\n" +
                "    </MeasureGroups>\n" +
                "  </Cube>\n" +
                "</Schema>";

        System.out.println (sfinal);

        String ff = new String();
        String f1=new String();
        
        try {
            config = new ConfigurationManager ("MongoModel.xml");
        } catch (IOException e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,e.getMessage(), "Warning", JOptionPane.WARNING_MESSAGE);         
        }
       
        f1=config.getProperty("mondrian");
        if (f1.length() > 0) ff=f1;
        
        // make sure we have proper path separator        
        ff += File.separator+cubename+".xml";
        
        try {
            PrintWriter out = new PrintWriter(ff);
            out.println(sfinal);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,e.getMessage(), "Warning", JOptionPane.WARNING_MESSAGE);         
        }

        // olap4j.properties requires only forward slashes in paths
        ff=ff.replace("\\", "/");
        // Make sure the paths don't contain the double separators
        ff=ff.replace("///","/");
        ff=ff.replace("//","/");
        
        String outstring =
                 cubename+".name="+cubename+"\n" + cubename+
                ".className=org.pentaho.platform.plugin.services.connections.PentahoSystemDriver\n" + cubename+
                ".connectString=jdbc:mondrian4:Host="+jTextField1.getText()+";dbname="+db.toString()+";DataServicesProvider=com.pentaho.analysis.mongo.MongoDataServicesProvider;Catalog="+ff+";\n";
        
        jTextArea1.setText (outstring);
        
        jButtonOlap4j.setEnabled(true);
        
    }//GEN-LAST:event_jMenuMakeModelActionPerformed

    
    private void jButtonOlap4jActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOlap4jActionPerformed
        // Append to olap4j.properties
        if (jTextArea1.getText().length() < 1) {
            JOptionPane.showMessageDialog(this,"Create your cube and select File | Make Model before updating olap4j.properties", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            config = new ConfigurationManager ("MongoModel.xml");
        } catch (IOException e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,e.getMessage(), "Warning", JOptionPane.WARNING_MESSAGE);         
        }
        
        olap4j = (String)JOptionPane.showInputDialog(null, "Enter the path location of olap4j.properties", "olap4j.properties", JOptionPane.QUESTION_MESSAGE,null,null,config.getProperty("olap4j"));
        config.setProperty("olap4j", olap4j);
        // make sure we have the right path seperator
        String ofile = new String();
        ofile=olap4j.toString()+File.separator;
        ofile+="olap4j.properties";
        
        try {
            config.save();
        }  catch (Exception e)
        { e.printStackTrace();
            JOptionPane.showMessageDialog(this,e.getMessage(), "Warning", JOptionPane.WARNING_MESSAGE);         
        }
        
        try
        {
            PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(ofile, true)));                    
            out.println("\n"+jTextArea1.getText());
            out.close();
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(this,"Cannot write to file"+ofile, "Warning", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }        
    }//GEN-LAST:event_jButtonOlap4jActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        //olap4j = JOptionPane.showInputDialog(null, "Enter the path location of olap4j.properties", "olap4j.properties", 1);
        jSettings frame = new jSettings();
        //frame.setAlwaysOnTop(true);
        frame.setResizable(true);
        //frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setLocationRelativeTo(getRootPane());        
        frame.setVisible(true);

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        // Launch dialog to manage olap4j.properties connections file
        ManageOfile frame = new ManageOfile ();
        //frame.setAlwaysOnTop(true);
        frame.setResizable(true);
        //frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setLocationRelativeTo(getRootPane());        
        frame.setVisible(true);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this," Version 1.0 \n Contact: Mark Kromer \n mark_kromer@mail.com", "Mongo Model Generator", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try {
            Desktop.getDesktop().browse(new URL("https://github.com/kromerm/MondrianMongoModel/wiki/Mondrian-Mongo-Modeler-Help").toURI());
        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,"Unable to launch browser window", "Warning", JOptionPane.WARNING_MESSAGE);            
        }
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Launch model editor window
        
        Editor frame = new Editor ();
        
        //frame.setAlwaysOnTop(true);
        frame.setResizable(true);
        //frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setLocationRelativeTo(getRootPane());        
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here
        // double-click same as button click
        {
            jButton3ActionPerformed(null);
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        // double-click same as button press
        jButton4ActionPerformed(null);
    }//GEN-LAST:event_jList2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonOlap4j;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JList jList4;
    private javax.swing.JList jList5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuMakeModel;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
